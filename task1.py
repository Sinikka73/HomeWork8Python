"""
Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора
класса (метод init()), который должен принимать данные (список списков)
для формирования матрицы. [[], [], []]
Следующий шаг — реализовать перегрузку метода str() для вывода матрицы
в привычном виде.

Далее реализовать перегрузку метода add() для реализации операции
сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.

Подсказка: сложение элементов матриц выполнять поэлементно —
первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.

Пример:
1 2 3
4 5 6
7 8 9

1 2 3
4 5 6
7 8 9

Сумма матриц:
2 4 6
8 10 12
14 16 18
"""
import copy


class Matrix:
    """
    Работа с матрицами. Для сложения матриц необходимо создать новую
    аналогичную. Можно задать вручную с нулевыми значениями, либо,
    для универсальности решения,
    воспользоваться модулем copy. Т.к. в нашем случае составной объект,
    содержащий изменяемые объекты (список списков), применяем
    глубокое копирование
    """

    def __init__(self, matrix):
        self.matrix = matrix

    def __str__(self):
        res = ''
        for i in range(len(self.matrix)):
            res = res + '\t'.join(map(str, self.matrix[i])) + '\n'
        return res

    def __add__(self, other):
        """
        copy.deepcopy(x) - возвращает полную копию x.
        Глубокая копия создает новый составной объект, и затем рекурсивно
        вставляет в него копии объектов, находящихся в оригинале.
        """
        result = copy.deepcopy(self.matrix)
        
        # result = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

        for i in range(len(self.matrix)):
            for j in range(len(self.matrix[i])):
                result[i][j] = self.matrix[i][j] + other.matrix[i][j]
        return Matrix(result)


my_list_1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
my_list_2 = [[10, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix_1 = Matrix(my_list_1)
matrix_2 = Matrix(my_list_2)
print(matrix_1)
print(matrix_2)
matrix_3 = matrix_1 + matrix_2
print(f"Сумма матриц:\n{matrix_3}")